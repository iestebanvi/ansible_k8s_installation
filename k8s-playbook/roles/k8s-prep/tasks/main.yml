---
- name: Configure kernel modules for Kubernetes
  blockinfile:
    path: /etc/modules-load.d/k8s.conf
    create: yes
    block: |
      overlay
      br_netfilter
      8021q
      dm_snapshot
      dm_thin_pool

- name: Load kernel modules
  modprobe:
    name: "{{ item }}"
  loop:
    - overlay
    - br_netfilter
    - 8021q
    - dm_snapshot
    - dm_thin_pool

- name: Configure sysctl for Kubernetes
  sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    sysctl_file: /etc/sysctl.d/k8s.conf
    reload: yes
  loop:
    - { key: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
    - { key: 'net.bridge.bridge-nf-call-iptables', value: '1' }
    - { key: 'net.ipv4.ip_forward', value: '1' }

- name: Disable swap
  shell: swapoff /swap.img
  ignore_errors: yes

- name: Remove swap from fstab
  lineinfile:
    path: /etc/fstab
    regexp: '.*swap.*'
    state: absent

# Configuraci贸n de repositorios y containerd
- name: Add Kubernetes APT key from Artifactory
  shell: |
    curl -H "X-JFrog-Art-Api: {{ caas_sa_af_token }}" \
      https://artifactory.devops.telekom.de/artifactory/tdi-caas-generic-local/mt-fehervari/apt-key.gpg | apt-key add -

- name: Add Kubernetes repository
  copy:
    content: "deb https://apt.kubernetes.io/ kubernetes-xenial main"
    dest: /etc/apt/sources.list.d/kubernetes.list

- name: Configure APT proxy
  copy:
    content: |
      Acquire::http::Proxy "http://{{ apt_proxy }}:8000";
      Acquire::https::Proxy "http://{{ apt_proxy }}:8000";
    dest: /etc/apt/apt.conf.d/proxy.conf

- name: Update package cache
  apt:
    update_cache: yes

# Instalaci贸n de containerd
- name: Download containerd archive
  get_url:
    url: "https://artifactory.devops.telekom.de/artifactory/tdi-caas-generic-local/mt-fehervari/containerd-{{ containerd_version }}-linux-amd64.tar.gz"
    dest: "/tmp/containerd-{{ containerd_version }}-linux-amd64.tar.gz"
    headers:
      X-JFrog-Art-Api: "{{ caas_sa_af_token }}"

- name: Extract containerd
  unarchive:
    src: "/tmp/containerd-{{ containerd_version }}-linux-amd64.tar.gz"
    dest: /usr/local
    remote_src: yes

- name: Download containerd service file
  get_url:
    url: "https://artifactory.devops.telekom.de/artifactory/tdi-caas-generic-local/mt-fehervari/containerd.service"
    dest: /usr/lib/systemd/system/containerd.service
    headers:
      X-JFrog-Art-Api: "{{ caas_sa_af_token }}"

# Instalaci贸n de paquetes Kubernetes
- name: Install Kubernetes packages
  apt:
    name:
      - "cri-tools={{ cri_tools_version }}"
      - runc
      - apt-transport-https
      - ca-certificates
      - curl
      - "kubelet={{ kube_version }}"
      - "kubeadm={{ kube_version }}"
      - "kubectl={{ kube_version }}"
    state: present
    allow_change_held_packages: yes
    allow_downgrade: yes

- name: Hold Kubernetes packages
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop:
    - kubelet
    - kubeadm
    - kubectl
    - containerd

- name: Reload systemd and enable containerd
  systemd:
    name: containerd
    daemon_reload: yes
    enabled: yes
    state: started

# Configuraci贸n de containerd
- name: Create containerd config directory
  file:
    path: /etc/containerd
    state: directory
    mode: '0755'

- name: Configure containerd
  template:
    src: containerd-config.toml.j2
    dest: /etc/containerd/config.toml
  notify: restart containerd

# Configurar kube-vip solo en masters
- name: Check if kube-vip manifest exists
  stat:
    path: /etc/kubernetes/manifests/kube-vip.yaml
  register: kube_vip_manifest
  when: inventory_hostname in groups['masters']

- name: Configure crictl for kube-vip
  copy:
    content: |
      runtime-endpoint: unix:///run/containerd/containerd.sock
      image-endpoint: unix:///run/containerd/containerd.sock
      timeout: 10
    dest: /etc/crictl.yaml
  when: 
    - inventory_hostname in groups['masters']
    - not kube_vip_manifest.stat.exists

- name: Pull kube-vip image
  shell: |
    crictl --debug pull artifactory.devops.telekom.de/kube-vip/kube-vip:{{ kube_vip_version }}
    ctr images pull artifactory.devops.telekom.de/kube-vip/kube-vip:{{ kube_vip_version }}
  when: 
    - inventory_hostname in groups['masters']
    - not kube_vip_manifest.stat.exists

- name: Create kubernetes manifests directory
  file:
    path: /etc/kubernetes/manifests
    state: directory
    mode: '0755'
  when: inventory_hostname in groups['masters']

- name: Generate kube-vip manifest
  shell: |
    ctr --namespace k8s.io run --rm --net-host \
      artifactory.devops.telekom.de/kube-vip/kube-vip:{{ kube_vip_version }} vip \
      /kube-vip manifest pod --arp --interface {{ dth_interface }} \
      --vip {{ k8s_api_ip }} --controlplane --leaderElection > /etc/kubernetes/manifests/kube-vip.yaml
  when: 
    - inventory_hostname in groups['masters']
    - not kube_vip_manifest.stat.exists

- name: Fix kube-vip image registry
  replace:
    path: /etc/kubernetes/manifests/kube-vip.yaml
    regexp: 'ghcr.io'
    replace: 'artifactory.devops.telekom.de'
  when: 
    - inventory_hostname in groups['masters']
    - not kube_vip_manifest.stat.exists
