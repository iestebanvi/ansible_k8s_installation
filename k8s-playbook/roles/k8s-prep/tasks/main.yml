---
- name: Configure kernel modules for Kubernetes
  blockinfile:
    path: /etc/modules-load.d/k8s.conf
    create: yes
    block: |
      overlay
      br_netfilter
      8021q
      dm_snapshot
      dm_thin_pool

- name: Load kernel modules
  modprobe:
    name: "{{ item }}"
  loop:
    - overlay
    - br_netfilter
    - 8021q
    - dm_snapshot
    - dm_thin_pool

- name: Configure sysctl for Kubernetes
  sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    sysctl_file: /etc/sysctl.d/k8s.conf
    reload: yes
  loop:
    - { key: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
    - { key: 'net.bridge.bridge-nf-call-iptables', value: '1' }
    - { key: 'net.ipv4.ip_forward', value: '1' }

- name: Disable swap
  shell: swapoff /swap.img
  ignore_errors: true

- name: Remove swap from fstab
  lineinfile:
    path: /etc/fstab
    regexp: '.*swap.*'
    state: absent


- name: Configure APT proxy
  copy:
    content: |
      Acquire::http::Proxy "http://{{ apt_proxy }}:8000";
      Acquire::https::Proxy "http://{{ apt_proxy }}:8000";
    dest: /etc/apt/apt.conf.d/proxy.conf

- name: Create APT keyrings directory
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Check if GPG key exists and is valid
  stat:
    path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  register: gpg_key_exists

- name: Remove potentially corrupted GPG key
  file:
    path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    state: absent
  when: gpg_key_exists.stat.exists and gpg_key_exists.stat.size == 0

- name: Add Kubernetes APT key from new Artifactory
  shell: |
    curl -fsSL https://artifactory.caas.in.pan-net.eu/repository/images/apt_keys/Release_1.32.key | \
    gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  when: not gpg_key_exists.stat.exists or gpg_key_exists.stat.size == 0

- name: Add new Kubernetes repository
  copy:
    content: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://artifactory.caas.in.pan-net.eu/repository/kubernetes-v1-32/ /"
    dest: /etc/apt/sources.list.d/kubernetes.list

- name: Update package cache
  apt:
    update_cache: yes

- name: Install Kubernetes packages
  apt:
    name:
      - "cri-tools={{ cri_tools_version }}"
      - runc
      - apt-transport-https
      - ca-certificates
      - curl
      - "kubelet={{ kube_version }}"
      - "kubeadm={{ kube_version }}"
      - "kubectl={{ kube_version }}"
      - socat
      - ebtables
      - conntrack
      - kubernetes-cni
    state: present
    allow_change_held_packages: yes
    allow_downgrade: yes

# Descargar e instalar containerd (sin autenticación como en tu script)
- name: Download containerd archive
  get_url:
    url: "https://artifactory.caas.in.pan-net.eu/repository/images/containerd/containerd-1.7.22-linux-amd64.tar.gz"
    dest: "/tmp/containerd-1.7.22-linux-amd64.tar.gz"

- name: Extract containerd
  unarchive:
    src: "/tmp/containerd-1.7.22-linux-amd64.tar.gz"
    dest: /usr/local
    remote_src: yes

- name: Download containerd service file
  get_url:
    url: "https://artifactory.caas.in.pan-net.eu/repository/images/containerd/containerd.service"
    dest: /usr/lib/systemd/system/containerd.service

- name: Reload systemd and enable containerd
  systemd:
    name: containerd
    daemon_reload: yes
    enabled: yes
    state: started
    
- name: Create containerd config directory
  file:
    path: /etc/containerd
    state: directory
    mode: '0755'

- name: Configure containerd
  template:
    src: containerd-config.toml.j2
    dest: /etc/containerd/config.toml
  notify: restart containerd

# Configurar crictl
- name: Configure crictl
  copy:
    content: |
      runtime-endpoint: unix:///run/containerd/containerd.sock
      image-endpoint: unix:///run/containerd/containerd.sock
      timeout: 10
    dest: /etc/crictl.yaml

# Hold de paquetes
- name: Hold Kubernetes packages
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop:
    - kubelet
    - kubeadm
    - kubectl
    # - containerd

# Configuración de logging para iptables-events
- name: Configure rsyslog for iptables events
  copy:
    content: |
      if $msg contains "calico-packet:" then {
              action(type="omfile" file="/var/log/iptables.log" template="RSYSLOG_FileFormat")
              & stop
      }
    dest: /etc/rsyslog.d/40-iptables.conf

- name: Configure logrotate for iptables
  copy:
    content: |
      /var/log/iptables.log
      {
              rotate 3
              daily
              missingok
              notifempty
              delaycompress
              compress
              postrotate
              /usr/lib/rsyslog/rsyslog-rotate
              endscript
      }
    dest: /etc/logrotate.d/iptables

- name: Restart rsyslog
  systemd:
    name: rsyslog
    state: restarted

- name: Restart logrotate
  systemd:
    name: logrotate
    state: restarted

