---
- name: Check if cluster is already initialized
  stat:
    path: /etc/kubernetes/admin.conf
  register: k8s_admin_conf

- name: Pull kube-vip image
  shell: |
    crictl --debug pull artifactory-virtual.caas.in.pan-net.eu/kube-vip/kube-vip:{{ kube_vip_version }}
    ctr images pull artifactory-virtual.caas.in.pan-net.eu/kube-vip/kube-vip:{{ kube_vip_version }}

- name: Create kubernetes manifests directory
  file:
    path: /etc/kubernetes/manifests
    state: directory
    mode: '0755'

- name: Generate kube-vip manifest
  shell: |
    ctr --namespace k8s.io run --rm --net-host \
      artifactory-virtual.caas.in.pan-net.eu/kube-vip/kube-vip:{{ kube_vip_version }} vip \
      /kube-vip manifest pod \
        --arp \
        --interface {{ dth_interface }} \
        --vip {{ k8s_api_ip }} \
        --controlplane \
        --leaderElection > /etc/kubernetes/manifests/kube-vip.yaml

- name: Fix kube-vip admin.conf path after init
  replace:
    path: /etc/kubernetes/manifests/kube-vip.yaml
    regexp: 'path: /etc/kubernetes/admin.conf'
    replace: 'path: /etc/kubernetes/super-admin.conf'
  when: not k8s_admin_conf.stat.exists

- name: Fix kube-vip image registry
  replace:
    path: /etc/kubernetes/manifests/kube-vip.yaml
    regexp: 'ghcr.io'
    replace: 'artifactory-virtual.caas.in.pan-net.eu'

- name: Create kubeadm config
  template:
    src: kubeadm-config.yaml.j2
    dest: /root/kubeadm-config.yaml
  when: not k8s_admin_conf.stat.exists

- name: Initialize Kubernetes cluster
  shell: kubeadm init --config /root/kubeadm-config.yaml --skip-phases addon/coredns,addon/kube-proxy --upload-certs
  register: kubeadm_init_result
  when: not k8s_admin_conf.stat.exists

- name: Wait for API server to be ready after init
  wait_for:
    port: 6443
    host: "127.0.0.1"
    timeout: 120
  when: not k8s_admin_conf.stat.exists and kubeadm_init_result is defined

- name: Fix kube-vip admin.conf path after init
  replace:
    path: /etc/kubernetes/manifests/kube-vip.yaml
    regexp: 'path: /etc/kubernetes/super-admin.conf'
    replace: 'path: /etc/kubernetes/admin.conf'
  when: not k8s_admin_conf.stat.exists

- name: Generate bootstrap join command
  shell: kubeadm token create --print-join-command --certificate-key $(kubeadm certs certificate-key)
  register: bootstrap
  changed_when: false
  run_once: true

- name: Upload certs and capture ONLY the certificate key
  shell: |
    kubeadm init phase upload-certs --certificate-key $(kubeadm certs certificate-key) --upload-certs \
    | awk '/Using certificate key/{getline;print;exit}'
  register: new_cert
  changed_when: false
  run_once: true

- name: Extract pieces from the original join command
  set_fact:
    join_token: "{{ (bootstrap.stdout | regex_findall('--token\\s+(\\S+)'))[0] }}"
    join_discovery_hash: "{{ (bootstrap.stdout | regex_findall('--discovery-token-ca-cert-hash\\s+(\\S+)'))[0] }}"
    join_cert_key: "{{ new_cert.stdout | trim }}"
    final_join_command: >-
      {{ (bootstrap.stdout | regex_replace('--certificate-key\\s+\\S+',
                                            '--certificate-key ' ~ (new_cert.stdout | trim))) }}
  run_once: true

- name: Enable kube-vip leader election after init
  replace:
    path: /etc/kubernetes/manifests/kube-vip.yaml
    regexp: 'name: vip_leaderelection\n\s+value: "false"'
    replace: 'name: vip_leaderelection\n      value: "true"'
  when: not k8s_admin_conf.stat.exists and kubeadm_init_result is defined

# - name: Set join tokens as facts
#   set_fact:
#     kubeadm_token: "{{ bootstrap_token.stdout }}"
#     kubeadm_discovery_token: "{{ discovery_token_hash.stdout }}"
#     kubeadm_cert_key: "{{ certificate_key.stdout }}"
#   # when: k8s_admin_conf.stat.exists or kubeadm_init_result is defined

# - name: Display kubeadm init output
#   debug:
#     var: kubeadm_init_result.stdout_lines
#   when: 
#     - not k8s_admin_conf.stat.exists
#     - kubeadm_init_result is defined

# - name: Display generated tokens
#   debug:
#     msg:
#       - "Bootstrap token: {{ kubeadm_token }}"
#       - "Discovery token: {{ kubeadm_discovery_token }}"
#       - "Certificate key: {{ kubeadm_cert_key }}"
#       - "IMPORTANT: CoreDNS and kube-proxy phases were skipped"
#       - "You'll need to install these components separately"
#   # when: k8s_admin_conf.stat.exists or kubeadm_init_result is defined

- name: Display generated tokens
  debug:
    msg:
      - "Bootstrap token: {{ join_token }}"
      - "Discovery token: {{ join_discovery_hash }}"
      - "Certificate key: {{ join_cert_key }}"
      - "Final join command: {{ final_join_command }}"
      - "IMPORTANT: CoreDNS and kube-proxy phases were skipped"
      - "You'll need to install these components separately"
  # when: k8s_admin_conf.stat.exists or kubeadm_init_result is defined